package com.example.jdbc.exception;

/**
 * TODO :
 *                                              Object
 *                                                |
 *                                            Throwable
 *                                                |
 *             Exception (체크예외, 컴파일 예외) ------------- Error : 메모리가 부족하거나 시스템 오류등 복구 불가능 예외로 개발자는 잡으려 하면 안된다.
 *                 |
 *    SqlException ----- IOException --------RuntimeException (언체크 예외, 런타임 예외)
 *                                                  |
 *                            NullPointerException -------------- IllegalArgumentException
 *
 *
 * - 예외를 처리하지 못하고 계속 던지는 경우?
 * 1. 자바 'main()' 쓰레드의 경우 예외 로그를 출력하면서 시스템이 종료.
 * 2. 웹 애플리케이션의 경우 여러 사용자의 요청을 처리하기 때문에 하나의 예외 때문에 시스템이 종료되면 안된다.
 *      WAS가 해당 예외를 받아서 처리한다.(주로 개발자가 지정한 오류페이를 보여주거나 예외처리를 함)
 *
 * TODO : 체크예외 vs 언체크 예외
 * 체크예외 : 예외를 잡아서 처리하지 않으면 항상 'throws' 에 던지는 예외를 선언해야 한다.
 * 언체크 예외 : 예외를 잡아서 처리하지 않아도 'throws' 를 생략할 수 있다.
 *
 * - 체크예외(컴파일 예외)
 * 장점 : 체크예외는 개발자가 예외를 잡도록 가이드하는 안전장치이다.
 * 단점 : 실제로는 개발자가 모든 예외를 잡거나 던져야하기에 번거롭고 계층간 의존관계에 따른 단점이 존재한다.
 *
 * - 언체크예외(런타임 예외)
 * 장점 : 신경쓰고 싶지 않은 언체크 예외를 무시할 수 있다. (throws 를 생략가능하기에) , 신경쓰고 싶지 않은 의존관계를 참조하지 않아도된다.
 * 단점 : 개발자가 실수로 예외를 누락할 수 있다.
 *
 *
 *
 * TODO : 체크 예외 활용 ---> 그러나 기본적으로 언체크(런타임) 예외를 사용하자
 * 체크예외는 비즈니스 로직상 의도적으로 던지는 예외에만 사용하자
 * ex)
 *  계좌 이체 실패 예외
 *  결제시 포인트 부족 예외
 *  로그인 ID , PW 불일치 예외
 *
 *  TODO : 에외 포함과 스택 트레이스
 *  - 예외를 전환할 때는 꼭! 기존 예외를 포함해야 한다. 그렇지 않으면 스택 트레이스를 확인할 때 심각한 문제가 발생한다.
 *      기존예외를 포함해 예외를 넣어줘야 확인이 가능앟ㄴ 루트 Exception 을 확인할 수 있다.
 *
 */
public class ExceptionExplain {

}
